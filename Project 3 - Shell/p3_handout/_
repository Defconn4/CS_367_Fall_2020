/* This is the only file you should update and submit. */

/* Fill in your Name and GNumber in the following two comment fields
 * Name: Frankie Costantino
 * GNumber: G01132886
 */

/* Final project yay and ;(! */
#include "shell.h"
#include "parse.h"

/* Constants */
#define DEBUG 1
//static const char *shell_path[] = { "./", "/usr/bin/", NULL };
//static const char *built_ins[] = { "quit", "help", "kill", "fg", "bg", "jobs", NULL};

/* Struct definition for command typed in by user in shell */
typedef struct command_struct {
	int job_id;		/* Job ID assigned on creation */
	int pid;		/* Process ID for each job (generated by Kernel) */
	int exec_status;	/* 0 = Stopped, 1 = Running */
	char *cmd;		/* Command from user without the \n */
	struct command_struct *next;
} Command;


/* Singly Linked List Struct Definition */
typedef struct process_list {
	Command *head;		/* Head of Singly Linked List */
	int count;		/* Number of jobs in the list */
} List;


/* Shell Job Lists Struct Definition */
typedef struct shell_jobs {
	List *fg_jobs;		/* Foreground (fg) Processes */
	List *bg_jobs;		/* Background (bg) Processes */
} Jobs;


/* Function Prototypes */
Jobs *shell_init();
void shell_free();
void dealloc_lists(Command *head);









/* ---------------------------------------MAIN CODE IS BELOW--------------------------------------------------- */

/* The entry of your shell program */
int main() {
	char cmdline[MAXLINE];        /* Command line */
	char *cmd = NULL;

	/* Intial Prompt and Welcome */
	log_prompt();
	log_help();

	/* Shell looping here to accept user command and execute */
	while (1)
	{
		char *argv[MAXARGS], *argv2[MAXARGS];     /* Argument list */
		Cmd_aux aux;                /* Auxilliary cmd info: check parse.h */

		/* Print prompt */
		log_prompt();

		/* Read a line */
		// note: fgets will keep the ending '\n'
		if (fgets(cmdline, MAXLINE, stdin) == NULL) 
		{
			if (errno == EINTR)
			continue;
			exit(-1);
		}

		if (feof(stdin)) /* ctrl-d will exit shell */
		{
			exit(0);
		}

		/* Parse command line */
		if (strlen(cmdline)==1)   /* empty cmd line will be ignored */
		continue;     

		cmdline[strlen(cmdline) - 1] = '\0';        /* remove trailing '\n' */

		cmd = malloc(strlen(cmdline) + 1);
		snprintf(cmd, strlen(cmdline) + 1, "%s", cmdline);

		/* Bail if command is only whitespace */
    		if(!is_whitespace(cmd))
		{
      			initialize_argv(argv);    /* initialize arg lists and aux */
      			initialize_argv(argv2);
      			initialize_aux(&aux);
      			parse(cmd, argv, argv2, &aux); /* call provided parse() */

      			if (DEBUG)  /* display parse result, redefine DEBUG to turn it off */
        		debug_print_parse(cmd, argv, argv2, &aux, "main (after parse)");

      			/* After parsing: your code to continue from here */
      			/*================================================*/	
		
			// Initalize instance of our Jobs shell data structure.
			Jobs *shell = shell_init();



			// Deallocate memory for shell before exiting.
			shell_free(shell);
			
		}

		free_options(&cmd, argv, argv2, &aux);
	}
	
	// Return from main.
	return 0;
}



/* Initialize our underlying data structure for our shell.
 * Returns a pointer to the new Job data structure or NULL on any error.
 */
Jobs *shell_init() {
	
	// Allocate memory for Jobs structure.
	// If memory cannot be properly allocated, return NULL.
	Jobs *shell = (Jobs *) malloc(sizeof(Jobs));
	
	if(shell == NULL) { return NULL; }
	
	// Allocate memory for each List inside Job shell.
	shell -> fg_jobs = (List *) malloc(sizeof(List));
	shell -> bg_jobs = (List *) malloc(sizeof(List));
	
	// Check that each List has been properly allocated. If not return NULL.
	if( (shell -> fg_jobs) == NULL || (shell -> bg_jobs) == NULL) { return NULL; }
	
	// Set the # of jobs per List to 0 to begin.
	shell -> fg_jobs -> count = 0;
	shell -> bg_jobs -> count = 0;
	
	// Initialize head pointers to NULL for each List.
	shell -> fg_jobs -> head = NULL;
	shell -> bg_jobs -> head = NULL;
	
	return shell;
}


/* Helper function for shell_free that deallocates jobs in FG and BG. */
void dealloc_lists(Command *head) {
	
	// Store incoming head of List.
	Command *cur = head;
	
	// Temp node for deallocation help.
	Command *temp = NULL;
	char *cmd = NULL;
	
	// Free all nodes in the list.
	while (cur != NULL)
	{
		// Store current node in temp.
		// Store temp's job command (cmd).
		// Move to next node.
		// Free previous node and & job command.
		temp = cur;
		cmd = temp -> cmd;
		cur = cur -> next;
		free(temp);
		free(cmd);
	}
	
	// Set the head the List to NULL.
	cur = NULL;
	return;
}


/* Frees allocated memory in the shell.
 * Deallocates memory from the inside out. */
void shell_free(Jobs *shell) {

	// Deallocate memory for fg_jobs List.
	dealloc_lists(shell -> fg_jobs -> head);
	free(shell -> fg_jobs);
	
	// Deallocate memory for bg_jobs List.
	dealloc_lists(shell -> bg_jobs -> head);
	free(shell -> bg_jobs);
	
	// Deallocate memory for shell.
	free(shell);
	
	return;
}




